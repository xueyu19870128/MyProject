@{ Layout = "../Shared/_Layout.cshtml"; }

<div class="card-box">
  <div class="m-t-0 header-title">
    内容设置
  </div>
  <p class="text-muted font-13 m-b-25">请点击链接更改内容设置</p>

  <template v-if="pageType === 'list'">

    <table class="table table-bordered table-striped">
      <tbody>
        <tr>
          <td>内容编辑器图片</td>
          <td>
            <a href="javascript:;" v-on:click="pageType = 'isSaveImageInTextEditor'" class="editable">
              {{ config.isSaveImageInTextEditor ? '自动保存外部图片' : '不保存' }}
            </a>
          </td>
        </tr>
        <tr>
          <td>内容编辑器分页方式</td>
          <td>
            <a href="javascript:;" v-on:click="pageType = 'isAutoPageInTextEditor'" class="editable">
              {{ config.isAutoPageInTextEditor ? '自动分页，每页 ' + config.autoPageWordNum + ' 字' : '手动插入分页符分页' }}
            </a>
          </td>
        </tr>
        <tr>
          <td>标题双空格换行</td>
          <td>
            <a href="javascript:;" v-on:click="pageType = 'isContentTitleBreakLine'" class="editable">
              {{ config.isContentTitleBreakLine ? '启用标题双空格换行' : '不启用' }}
            </a>
          </td>
        </tr>
        <tr>
          <td>副标题双空格换行</td>
          <td>
            <a href="javascript:;" v-on:click="pageType = 'isContentSubTitleBreakLine'" class="editable">
              {{ config.isContentSubTitleBreakLine ? '启用副标题双空格换行' : '不启用' }}
            </a>
          </td>
        </tr>
        <tr>
          <td>编辑器内容敏感词自动检测</td>
          <td>
            <a href="javascript:;" v-on:click="pageType = 'isAutoCheckKeywords'" class="editable">
              {{ config.isAutoCheckKeywords ? '启用自动检测' : '不启用' }}
            </a>
          </td>
        </tr>
        <tr>
          <td>内容审核机制</td>
          <td>
            <a href="javascript:;" v-on:click="pageType = 'checkContentLevel'" class="editable">
              {{ getCheckContentLevel(config.checkContentLevel) }}
            </a>
          </td>
        </tr>
        
      </tbody>
    </table>
  </template>
  <template v-else>

    <template v-if="pageType === 'isSaveImageInTextEditor'">
      <div class="form-group">
        <label>
          内容编辑器图片
          <small v-show="errors.has('isSaveImageInTextEditor')" class="text-danger">{{
            errors.first('isSaveImageInTextEditor') }}</small>
        </label>
        <select v-model="isSaveImageInTextEditor" name="isSaveImageInTextEditor" data-vv-as="内容编辑器图片" v-validate="'required'" :class="{'is-invalid': errors.has('isSaveImageInTextEditor') }" class="form-control">
          <option :value="true">自动保存外部图片</option>
          <option :value="false">不保存</option>
        </select>
        <small class="form-text text-muted">自动保存外部图片功能将把编辑器内的外部图片保存为站点图片</small>
      </div>
    </template>
    <template v-else-if="pageType === 'isAutoPageInTextEditor'">
      <div class="form-group">
        <label>
          内容编辑器分页方式
          <small v-show="errors.has('isAutoPageInTextEditor')" class="text-danger">{{
            errors.first('isAutoPageInTextEditor') }}</small>
        </label>
        <select v-model="isAutoPageInTextEditor" name="isAutoPageInTextEditor" data-vv-as="内容编辑器分页方式" v-validate="'required'" :class="{'is-invalid': errors.has('isAutoPageInTextEditor') }" class="form-control">
          <option :value="true">按指定字数自动分页</option>
          <option :value="false">手动插入分页符分页</option>
        </select>
        <small class="form-text text-muted">建议手动插入分页符分页，修改此项需要重新生成内容页面</small>
      </div>
      <div v-if="isAutoPageInTextEditor" class="form-group">
        <label>
          内容自动分页每页字数
          <small v-show="errors.has('autoPageWordNum')" class="text-danger">{{
            errors.first('autoPageWordNum') }}</small>
        </label>
        <input v-model="autoPageWordNum" name="autoPageWordNum" data-vv-as="内容自动分页每页字数" v-validate="'required|numeric|min_value:1'" :class="{'is-invalid': errors.has('autoPageWordNum') }"
          type="text" class="form-control" />
        <small class="form-text text-muted">在此设置内容自动分页的每页字数，修改此项需要重新生成内容页面</small>
      </div>
    </template>
    <template v-else-if="pageType === 'isContentTitleBreakLine'">
      <div class="form-group">
        <label>
          标题双空格换行
          <small v-show="errors.has('isContentTitleBreakLine')" class="text-danger">{{
            errors.first('isContentTitleBreakLine') }}</small>
        </label>
        <select v-model="isContentTitleBreakLine" name="isContentTitleBreakLine" data-vv-as="标题双空格换行" v-validate="'required'" :class="{'is-invalid': errors.has('isContentTitleBreakLine') }" class="form-control">
          <option :value="true">启用标题双空格换行</option>
          <option :value="false">不启用</option>
        </select>
        <small class="form-text text-muted">标题字段输入两连续的英文空格，内容页中标题将自动换行，列表页将忽略此空格</small>
      </div>
    </template>
    <template v-else-if="pageType === 'isContentSubTitleBreakLine'">
      <div class="form-group">
        <label>
          副标题双空格换行
          <small v-show="errors.has('isContentSubTitleBreakLine')" class="text-danger">{{
            errors.first('isContentSubTitleBreakLine') }}</small>
        </label>
        <select v-model="isContentSubTitleBreakLine" name="isContentSubTitleBreakLine" data-vv-as="副标题双空格换行" v-validate="'required'" :class="{'is-invalid': errors.has('isContentSubTitleBreakLine') }" class="form-control">
          <option :value="true">启用副标题双空格换行</option>
          <option :value="false">不启用</option>
        </select>
        <small class="form-text text-muted">副标题字段输入两连续的英文空格，内容页中副标题将自动换行，列表页将忽略此空格</small>
      </div>
    </template>
    <template v-else-if="pageType === 'isAutoCheckKeywords'">
      <div class="form-group">
        <label>
          编辑器内容敏感词自动检测
          <small v-show="errors.has('isAutoCheckKeywords')" class="text-danger">{{
            errors.first('isAutoCheckKeywords') }}</small>
        </label>
        <select v-model="isAutoCheckKeywords" name="isAutoCheckKeywords" data-vv-as="编辑器内容敏感词自动检测" v-validate="'required'" :class="{'is-invalid': errors.has('isAutoCheckKeywords') }" class="form-control">
          <option :value="true">启用自动检测</option>
          <option :value="false">不启用</option>
        </select>
        <small class="form-text text-muted">启用自动检测后，当点击确定按钮保存内容时，系统会自动对编辑器内容进行敏感词检测</small>
      </div>
    </template>
    <template v-else-if="pageType === 'checkContentLevel'">
      <div class="form-group">
        <label>
          内容审核机制
          <small v-show="errors.has('checkContentLevel')" class="text-danger">{{
            errors.first('checkContentLevel') }}</small>
        </label>
        <select v-model="checkContentLevel" name="checkContentLevel" data-vv-as="内容审核机制" v-validate="'required'" :class="{'is-invalid': errors.has('checkContentLevel') }" class="form-control">
          <option :value="1">一级</option>
          <option :value="2">二级</option>
          <option :value="3">三级</option>
          <option :value="4">四级</option>
          <option :value="5">五级</option>
        </select>
        <small class="form-text text-muted">内容在添加后需要经多少次审核才能正式发布</small>
      </div>
      <div class="form-group">
        <label>
          默认审核状态
          <small v-show="errors.has('checkContentDefaultLevel')" class="text-danger">{{
            errors.first('checkContentDefaultLevel') }}</small>
        </label>
        <select v-if="checkContentLevel == 1" v-model="checkContentDefaultLevel" name="checkContentDefaultLevel" data-vv-as="默认审核状态" v-validate="'required'" :class="{'is-invalid': errors.has('checkContentDefaultLevel') }" class="form-control">
          <option :value="-99">草稿</option>
          <option :value="0">待审核</option>
          <option :value="1">已审核</option>
        </select>
        <select v-if="checkContentLevel == 2" v-model="checkContentDefaultLevel" name="checkContentDefaultLevel" data-vv-as="默认审核状态" v-validate="'required'" :class="{'is-invalid': errors.has('checkContentDefaultLevel') }" class="form-control">
          <option :value="-99">草稿</option>
          <option :value="0">待审核</option>
          <option :value="1">初审通过，等待终审</option>
          <option :value="2">已审核</option>
        </select>
        <select v-if="checkContentLevel == 3" v-model="checkContentDefaultLevel" name="checkContentDefaultLevel" data-vv-as="默认审核状态" v-validate="'required'" :class="{'is-invalid': errors.has('checkContentDefaultLevel') }" class="form-control">
          <option :value="-99">草稿</option>
          <option :value="0">待审核</option>
          <option :value="1">初审通过，等待二审</option>
          <option :value="2">二审通过，等待终审</option>
          <option :value="3">已审核</option>
        </select>
        <select v-if="checkContentLevel == 4" v-model="checkContentDefaultLevel" name="checkContentDefaultLevel" data-vv-as="默认审核状态" v-validate="'required'" :class="{'is-invalid': errors.has('checkContentDefaultLevel') }" class="form-control">
          <option :value="-99">草稿</option>
          <option :value="0">待审核</option>
          <option :value="1">初审通过，等待二审</option>
          <option :value="2">二审通过，等待三审</option>
          <option :value="3">三审通过，等待终审</option>
          <option :value="4">已审核</option>
        </select>
        <select v-if="checkContentLevel == 5" v-model="checkContentDefaultLevel" name="checkContentDefaultLevel" data-vv-as="默认审核状态" v-validate="'required'" :class="{'is-invalid': errors.has('checkContentDefaultLevel') }" class="form-control">
          <option :value="-99">草稿</option>
          <option :value="0">待审核</option>
          <option :value="1">初审通过，等待二审</option>
          <option :value="2">二审通过，等待三审</option>
          <option :value="3">三审通过，等待四审</option>
          <option :value="4">四审通过，等待终审</option>
          <option :value="5">已审核</option>
        </select>
        <small class="form-text text-muted">在此设置内容的默认审核状态</small>
      </div>
      
    </template>

    <hr />

    <div class="text-center">
      <button class="btn btn-primary m-r-5" v-on:click="btnSubmitClick">保 存</button>
      <button class="btn m-r-5" v-on:click="pageType = 'list'">返 回</button>
    </div>

  </template>
</div>

@section Scripts{
<script src="configContent.js" type="text/javascript"></script> }